# frozen_string_literal: true
module Falcom
class Publisher < Model
  one_to_many :media, :key=>:publisherid, :order=>:publicationdate, :read_only=>true
  one_to_many :albums, :read_only=>true, :dataset=>proc{Album.eager_graph(:media).filter(Sequel[:media][:publisherid]=>id).order(:sortname)}, :eager_loader=>(proc do |eo|
      h = eo[:id_map]
      records = eo[:rows]
      records.each{|r| r.associations[:albums] = []}
      Album.eager_graph(:media).filter(Sequel[:media][:publisherid]=>h.keys).order(:sortname).all do |a|
        a.media.each do |m|
          if recs = h[m.publisherid]
            recs.each do |r| 
              r.associations[:albums] << a
              m.associations[:publisher] = r
            end
          end
        end
      end
      records.each{|r| r.associations[:albums].uniq!}
    end)
end
end

# Table: publishers
# Columns:
#  id   | integer | PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
#  name | text    |
# Indexes:
#  publishers_pkey | PRIMARY KEY btree (id)
